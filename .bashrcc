# .bashrc
# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

if [ -z "${fedora_chroot:-}" ] && [ -r /etc/fedora_chroot ]; then
    fedora_chroot=$(cat /etc/fedora_chroot)
fi


# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]; then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='\[\033[48;2;221;75;57;38;2;255;255;255m\] \$ \[\033[48;2;0;135;175;38;2;221;75;57m\]\[\033[48;2;0;135;175;38;2;255;255;255m\] \h \[\033[48;2;83;85;85;38;2;0;135;175m\]\[\033[48;2;83;85;85;38;2;255;255;255m\] \w \[\033[49;38;2;83;85;85m\]\[\033[00m\] '
else
    PS1='\[\033[48;2;105;121;16;38;2;255;255;255m\] \$ \[\033[48;2;0;135;175;38;2;105;121;16m\]\[\033[48;2;0;135;175;38;2;255;255;255m\] \u@\h \[\033[48;2;83;85;85;38;2;0;135;175m\]\[\033[48;2;83;85;85;38;2;255;255;255m\] \w \[\033[49;38;2;83;85;85m\]\[\033[00m\] '
fi
unset color_prompt force_color_prompt

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${fedora_chroot:+($fedora_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# User specific aliases and functions
if [ -d ~/.bashrc.d ]; then
    for rc in ~/.bashrc.d/*; do
        if [ -f "$rc" ]; then
            . "$rc"
        fi
    done
fi
unset rc

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'


if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi


# Foreground Colors
BLACK="\033[0;30m"
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
MAGENTA="\033[0;35m"
CYAN="\033[0;36m"
WHITE="\033[0;37m"

# Bright Foreground Colors
BRIGHT_BLACK="\033[1;30m"
BRIGHT_RED="\033[1;31m"
BRIGHT_GREEN="\033[1;32m"
BRIGHT_YELLOW="\033[1;33m"
BRIGHT_BLUE="\033[1;34m"
BRIGHT_MAGENTA="\033[1;35m"
BRIGHT_CYAN="\033[1;36m"
BRIGHT_WHITE="\033[1;37m"

# Background Colors
BG_BLACK="\033[0;40m"
BG_RED="\033[0;41m"
BG_GREEN="\033[0;42m"
BG_YELLOW="\033[0;43m"
BG_BLUE="\033[0;44m"
BG_MAGENTA="\033[0;45m"
BG_CYAN="\033[0;46m"
BG_WHITE="\033[0;47m"

# Bright Background Colors
BG_BRIGHT_BLACK="\033[1;40m"
BG_BRIGHT_RED="\033[1;41m"
BG_BRIGHT_GREEN="\033[1;42m"
BG_BRIGHT_YELLOW="\033[1;43m"
BG_BRIGHT_BLUE="\033[1;44m"
BG_BRIGHT_MAGENTA="\033[1;45m"
BG_BRIGHT_CYAN="\033[1;46m"
BG_BRIGHT_WHITE="\033[1;47m"

# Text Formatting
BOLD="\033[1m"
UNDERLINE="\033[4m"
BLINK="\033[5m"
INVERT="\033[7m"

# Reset Color
RESET="\033[0m"

export SCRIPT_DIR=~/Documents/library/scripts
alias getsrcs=$SCRIPT_DIR/get_srcs.sh
alias getproto=$SCRIPT_DIR/get_proto.sh
MESSAGE="BASHRC RELOADED"
alias rl="source ~/.bashrc && clear && printf '\033[1;35m\n\n' && printf '%*s\n' $((($(tput cols) - ${#MESSAGE}) / 2)) \"$MESSAGE\" && printf '\033[0m'"
alias cd="cd"
alias c="clear"

alias gg='_f() { if [[ $# == 0 ]]; then gitls; else git "$@"; fi }; _f'
alias gmoji=$SCRIPT_DIR/gmoji.sh
# All Git aliases start with gg for speed
alias ggg='git status'
alias ggs='git status --short --branch'
alias ggp='git pull' # Fetch and merge
alias ggf='git fetch'
alias ggm='git merge'
alias ggpu='git push'
alias ggr='git reset' # Specify a file to un-add or no file to unstage all
alias gga='git add'
alias ggap='git add -p' # Interactively choose hunks
alias ggac='git add --all && git commit --verbose -m' # Add "commit message"
alias ggc='git commit --verbose -m' # Add "commit message"
alias ggm='git commit --amend --verbose'
alias ggl='git log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short'
alias ggls='_f() { git ls-files "$@" | sort; }; _f'
alias ggd='git diff'
alias ggds='git diff --stat'
alias ggdc='git diff --cached'
alias ggcb='git checkout -b' # Create new branch
alias ggst='git stash'
alias ggpop='git stash pop'
alias al='a'
alias pw='bash -c '"'"'echo `tr -dc $([ $# -gt 1 ] && echo $2 || echo "A-Za-z0-9") < /dev/urandom | head -c $([ $# -gt 0 ] && echo $1 || echo 32)`'"'"' --'
alias tree="find . -not -path './.*' -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"
alias treea="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"

function gitls() {
    count=0  # Will keep the file count
    style=""
    # Getting the current branch name
    current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ $? -ne 0 ]; then
        echo -e "${BRIGHT_RED}Error: ${BRIGHT_CYAN}Not a git repository ${BRIGHT_MAGENTA}(or any parent up to mount point /)${RESET}"
        return 1  # Return with an error status code
    fi
    echo -e "${BRIGHT_RED}Current branch: ${BRIGHT_WHITE}${current_branch}${RESET}"

    # Storing the output of git status --porcelain in a variable
    git_status=$(git status --porcelain | sort -k1,1 -k2 | awk '{$1=$1};1')
    if [ -z "$git_status" ]; then
        echo -e "${BRIGHT_CYAN}No changes found in the repository${RESET}"
        return 0  # Return with a success status code
    fi

    # Find the maximum length of the filenames
    max_filename_length=0
    while IFS= read -r line; do
        filename="${line:2}"
        filename_length=${#filename}
        # Compare the current filename length with the current max
        max_filename_length=$(($max_filename_length < $filename_length ? $filename_length : $max_filename_length))
    done <<< "$git_status"

    # Cap the max_filename_length at 80 if it exceeds it
    if [ $max_filename_length -gt 80 ]; then
        max_filename_length=80
    fi

    # Running git status with the porcelain flag
    #git status --porcelain | sort | while read -r line; do
    while IFS= read -r line; do
        # Count the files
        ((count++))
        # Extracting the status code and the file name
        code="${line:0:2}"
        filename="${line:2}"; filename="${filename# }"

        # Matching the status code with the corresponding description
        description=""
        textformat=""
        case "$code" in
            "??") description="Untracked file (not in the repository)";;
            "A ") description="Added to the index (staged for commit)";;
            "M ") description="Modified (changes not staged for commit)";;
            "D ") description="Deleted (deleted but not staged for commit)";;
            "R ") description="Renamed (file has been renamed, not staged for commit)";;
            "C ") description="Copied (file has been copied, not staged for commit)";;
            "T ") description="Type changed (e.g., a file becomes executable)";;
            "U ") description="Unmerged (conflict in merging changes)";;
            "!!") description="Ignored (file is ignored by Git)";;
            "1 ") description="Index and working tree match (status for submodules)";;
            "2 ") description="Working tree changed but index not updated (status for submodules)";;
            "? ") description="Unknown (an error occurred while trying to obtain the status)";;
            *)    description="Unknown Status Code";;
        esac

        # Determine the color based on the status code
        case "$code" in
            "??") textformat="";;
            "A ") textformat="";;
            "M ") textformat=${UNDERLINE};;
            "D ") textformat="";;
            "R ") textformat="";;
            "C ") textformat="";;
            "T ") textformat="";;
            "U ") textformat="";;
            "!!") textformat="";;
            "1 ") textformat="";;
            "2 ") textformat="";;
            "? ") textformat="";;
            *)    textformat="";;
        esac

        # Determine if the file is a directory
        if [ -d "$filename" ]; then
            color="${BRIGHT_BLUE}"
        else
            color="${BRIGHT_YELLOW}"
        fi

        background="\033[49m"  # Default background
        # Printing the filename and description with the chosen colors
        printf "$background$color$textformat%-*s${BRIGHT_CYAN}%s${RESET}\n" "$max_filename_length" "$filename" " $description"

    # Loop through the next git status line
    done <<< "$git_status"

    # Printing the total count in purple and green
    echo -e "${MAGENTA}Total files:${RESET} ${count}"
}


function cd() {
    builtin cd "$1"
    if [ $? -eq 0 ]; then
        ls
    fi
}


function a() {
	# Store the first argument as a filter.
	local FILTER="${1}"

	# Function to list aliases.
	function list_aliases() {
		# Print the heading for aliases in bright red.
		echo -e "${BRIGHT_RED}Aliases:${RESET}"

		# If filter is provided, list aliases and apply the filter.
		alias | awk -F'[ =]' '{print "\033[33m"$2"\033[0m\t\033[34m"$0"\033[0m";}' | grep -E "${FILTER}"
	}

	# Function to list functions.
	function list_functions() {
		# Print the heading for functions in bright red.
		echo -e "${BRIGHT_RED}Functions:${RESET}"

		# If filter is provided, list functions and apply the filter.
		compgen -A function | grep -v '^_.*' | grep -E "${FILTER}"
	}

	# Combine the output of list_aliases and list_functions and pass to less.
	# The output is piped into less with several options for improved viewing.
    list_aliases; echo; list_functions;
}

function sparkbars() {
	columns=$(tput cols)
	chars=▁▂▃▄▅▆▇█
	for ((i = 1; i <= $columns; i++))
	do
		echo -n "${chars:RANDOM%${#chars}:1}"
	done
	echo
}


declare -A GITMOJI_LIST=(
    [:art:]="🎨 Improve structure / format of the code."
    [:zap:]="⚡ Improve performance."
    [:fire:]="🔥 Remove code or files."
    [:bug:]="🐛 Fix a bug."
    [:ambulance:]="🚑 Critical hotfix."
    [:sparkles:]="✨ Introduce new features."
    [:memo:]="📝 Add or update documentation."
    [:rocket:]="🚀 Deploy stuff."
    [:lipstick:]="💄 Add or update the UI and style files."
    [:tada:]="🎉 Begin a project."
    [:white_check_mark:]="✅ Add or update tests."
    [:lock:]="🔒 Fix security issues."
    [:apple:]="🍎 Fix something on macOS."
    [:penguin:]="🐧 Fix something on Linux."
    [:checkered_flag:]="🏁 Fix something on Windows."
    [:robot:]="🤖 Fix something on Android."
    [:green_apple:]="🍏 Fix something on iOS."
    [:bookmark:]="🔖 Release / Version tags."
    [:rotating_light:]="🚨 Remove linter warnings."
    [:construction:]="🚧 Work in progress."
    [:green_heart:]="💚 Fix CI Build."
    [:arrow_down:]="⬇ Downgrade dependencies."
    [:arrow_up:]="⬆ Upgrade dependencies."
    [:pushpin:]="📌 Pin dependencies to specific versions."
    [:construction_worker:]="👷 Add or update CI build system."
    [:chart_with_upwards_trend:]="📈 Add or update analytics or track code."
    [:recycle:]="♻ Refactor code."
    [:whale:]="🐳 Work on Docker."
    [:heavy_plus_sign:]="➕ Add a dependency."
    [:heavy_minus_sign:]="➖ Remove a dependency."
    [:wrench:]="🔧 Add or update configuration files."
    [:globe_with_meridians:]="🌐 Internationalization and localization."
    [:pencil2:]="✏ Fix typos."
    [:poop:]="💩 Write bad code that needs to be improved."
    [:rewind:]="⏪ Revert changes."
    [:twisted_rightwards_arrows:]="🔀 Merge branches."
    [:package:]="📦 Update compiled files or packages."
    [:alien:]="👽 Update code due to external API changes."
    [:truck:]="🚚 Move or rename files."
    [:page_facing_up:]="📄 Add or update license."
    [:boom:]="💥 Introduce breaking changes."
    [:bento:]="🍱 Add or update assets."
    [:ok_hand:]="👌 Due to code review changes."
    [:wheelchair:]="♿ Improve accessibility."
    [:bulb:]="💡 Add or update comments in source code."
    [:beers:]="🍻 Writing code drunkenly."
    [:speech_balloon:]="💬 Add or update text and literals."
    [:card_file_box:]="🗃 Perform database related changes."
    [:loud_sound:]="🔊 Add or update logs."
    [:mute:]="🔇 Remove logs."
    [:busts_in_silhouette:]="👥 Add or update contributor(s)."
    [:children_crossing:]="🚸 Improve user experience / usability."
    [:building_construction:]="🏗 Make architectural changes."
    [:iphone:]="📱 Work on responsive design."
    [:clown_face:]="🤡 Mock things."
    [:egg:]="🥚 Add or update an easter egg."
    [:see_no_evil:]="🙈 Add or update a .gitignore file."
    [:camera_flash:]="📸 Add or update snapshots."
    [:alembic:]="⚗ Try out experimental changes."
    [:mag:]="🔍 Improve SEO."
    [:wheel_of_dharma:]="☸ Work on Kubernetes."
    [:label:]="🏷 Add or update types (Flow, TypeScript)."
    [:seedling:]="🌱 Add or update seed files."
    [:triangular_flag_on_post:]="🚩 Add, update, or remove feature flags."
    [:goal_net:]="🥅 Catch errors."
    [:dizzy:]="💫 Add or update animations and transitions."
    [:wastebasket:]="🗑 Deprecate code that needs to be cleaned up."
    [:passport_control:]="🛂 Work on sign in and sign up."
    [:adhesive_bandage:]="🩹 Apply patches."
    [:monocle_face:]="🧐 Review code."
    [:coffin:]="⚰ Remove dead code."
    [:test_tube:]="🧪 Add a failing test."
    

)


function listgitmoji() {
    for key in "${!GITMOJI_LIST[@]}"; do
        echo "$key - ${GITMOJI_LIST[$key]}"
    done
}

function gcommit() {
    if [ -z "$1" ]; then
        echo "Usage: gitmoji <commit message>"
        return 1
    fi

    local message="$1"
    for key in "${!GITMOJI_LIST[@]}"; do
        message="${message//$key/${GITMOJI_LIST[$key]}}"
    done
    git commit -m "$message"
}



_gitmoji_autocomplete() {
    local cur prev words cword
    _init_completion -s || return

    local gitmoji_list
    gitmoji_list="${!GITMOJI_LIST[@]}"

    COMPREPLY=($(compgen -W "$gitmoji_list" -- "$cur"))
}


complete -F _gitmoji_autocomplete gcommit
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
